import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import StandardScaler

import ipywidgets as widgets
from IPython.display import display
from google.colab import files
ploaded = files.upload()

# Load the first uploaded CSV
for filename in uploaded.keys():
    df = pd.read_csv(filename)
    print(f"\nLoaded {filename}")
    break
# Step 3: Data Exploration & Visualization
print("First 5 rows of data:")
print(df.head())

print("\nDataset Info:")
print(df.info())
# Visualizations
plt.figure(figsize=(8, 5))
sns.histplot(df['charges'], kde=True)
plt.title("Distribution of Insurance Charges")
plt.xlabel("Charges")
plt.show()

plt.figure(figsize=(8, 5))
sns.boxplot(x='smoker', y='charges', data=df)
plt.title("Charges by Smoking Status")
plt.show()

plt.figure(figsize=(8, 5))
sns.scatterplot(x='bmi', y='charges', hue='smoker', data=df)
plt.title("BMI vs Charges (Colored by Smoker)")
plt.show()

 plt.figure(figsize=(8, 5))
sns.heatmap(df.corr(numeric_only=True), annot=True, cmap='coolwarm')
plt.title("Correlation Heatmap")
plt.show()   
# Step 4: Data Preprocessing
df_encoded = pd.get_dummies(df, drop_first=True)

X = df_encoded.drop("charges", axis=1)
y = df_encoded["charges"]

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)
# Step 5: Model Training
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Step 6: Model Evaluation
y_pred = model.predict(X_test)

print("\nModel Evaluation:")
print(f"R² Score: {r2_score(y_test, y_pred):.4f}")
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
print(f"RMSE: {rmse:.2f}")
# Step 5: Model Training
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Step 6: Model Evaluation
y_pred = model.predict(X_test)

print("\nModel Evaluation:")
print(f"R² Score: {r2_score(y_test, y_pred):.4f}")
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
print(f"RMSE: {rmse:.2f}")

# Step 7: Runtime Prediction Widget
def predict_insurance_charge(age, sex, bmi, children, smoker, region):
    input_dict = {
        'age': age,
        'bmi': bmi,
        'children': children,
        'sex_male': 1 if sex == 'male' else 0,
        'smoker_yes': 1 if smoker == 'yes' else 0,
        'region_northwest': 1 if region == 'northwest' else 0,
        'region_southeast': 1 if region == 'southeast' else 0,
        'region_southwest': 1 if region == 'southwest' else 0
    }

    input_df = pd.DataFrame([input_dict])
    input_scaled = scaler.transform(input_df)
    prediction = model.predict(input_scaled)[0]
    print(f"\nPredicted Insurance Charge: ${prediction:.2f}")
# Widgets for input
age_widget = widgets.IntSlider(min=18, max=100, step=1, description='Age')
sex_widget = widgets.Dropdown(options=['male', 'female'], description='Sex')
bmi_widget = widgets.FloatSlider(min=10, max=50, step=0.1, description='BMI')
children_widget = widgets.IntSlider(min=0, max=5, description='Children')
smoker_widget = widgets.Dropdown(options=['yes', 'no'], description='Smoker')
region_widget = widgets.Dropdown(options=['northeast', 'northwest', 'southeast', 'southwest'], description='Region')

ui = widgets.VBox([age_widget, sex_widget, bmi_widget, children_widget, smoker_widget, region_widget])
out = widgets.interactive_output(
    predict_insurance_charge,
    {
        'age': age_widget,
        'sex': sex_widget,
        'bmi': bmi_widget,
        'children': children_widget,
        'smoker': smoker_widget,
        'region': region_widget
    }
)

display(ui, out)
